:LaTeX_PROPERTIES:
#+LANGUAGE: de
#+OPTIONS: d:nil todo:nil pri:nil tags:nil
#+OPTIONS: H:4
#+LaTeX_CLASS: orgstandard
#+LaTeX_CMD: xelatex
#+LATEX_HEADER: \usepackage{listings}
:END:

:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_REVEAL_JS_VERSION: 4
#+REVEAL_THEME: league
#+REVEAL_EXTRA_CSS: ./mystyle.css
#+REVEAL_HLEVEL: 2
#+OPTIONS: timestamp:nil toc:nil num:nil
:END:

#+TITLE: Malware und Schutzmaßnahmen
#+SUBTITLE: IT-Sicherheit
#+AUTHOR: ITT-Net-Is


* Was ist Malware?
Malware (ein Kofferwort aus "malicious software", deutsch: Schadsoftware) bezeichnet Programme, die entwickelt wurden, um unerwünschte und schädliche Funktionen auf einem Computersystem auszuführen. Im Gegensatz zu regulärer Software, die dem Nutzer dient, verfolgt Malware schädliche Absichten wie Datendiebstahl, Systemschädigung oder unerlaubte Systemkontrolle.

* Verbreitungswege von Malware
Malware kann über verschiedene Wege auf ein System gelangen:
#+ATTR_REVEAL: :frag (appear)
- E-Mail-Anhänge
- Infizierte Websites
- Manipulierte Downloads
- Externe Speichermedien
- Sicherheitslücken in Betriebssystemen und Anwendungen
- Soziale Netzwerke und Messenger-Dienste

* Arten von Malware

** Computerviren
Computerviren sind Schadprogramme, die sich selbst reproduzieren können, indem sie ihren eigenen Code in andere ausführbare Dateien oder Systembereiche einfügen. Sie werden aktiviert, wenn die infizierte Datei ausgeführt wird. Wichtige Merkmale:
#+ATTR_REVEAL: :frag (appear)
- Benötigen einen "Wirt" (eine andere Datei), um sich zu verbreiten
- Können nicht selbständig über Netzwerke verbreitet werden
- Führen oft destruktive Aktionen aus (Dateien löschen, Systeme beschädigen)
- Beispiele: Boot-Viren, Makro-Viren, Skript-Viren

** Computerwürmer
Würmer sind eigenständige Programme, die sich selbst über Netzwerke verbreiten können, ohne eine Wirtsdatei zu benötigen. Charakteristika:

#+ATTR_REVEAL: :frag (appear)
- Benötigen keine Benutzerinteraktion zur Verbreitung
- Nutzen oft Sicherheitslücken in Netzwerkprotokollen oder -diensten aus
- Verursachen häufig Netzwerküberlastungen durch ihre Verbreitungsaktivität
- Beispiele: Morris-Wurm, WannaCry (kombiniert mit Ransomware), Conficker

** Trojaner
Trojaner (oder Trojanische Pferde) tarnen sich als nützliche Software, enthalten jedoch versteckte schädliche Funktionen. Eigenschaften:

#+ATTR_REVEAL: :frag (appear)
- Keine Selbstreplikation wie bei Viren oder Würmern
- Täuschen Benutzer durch vermeintlich nützliche Funktionen
- Schaffen oft Hintertüren für weiteren Schadcode
- Beispiele: Remote Access Trojans (RATs), Banking-Trojaner, Adware-Trojaner

** Information-Stealer
Information-Stealer (Datendiebe) sind spezialisierte Malware, die auf das Sammeln und Übermitteln vertraulicher Informationen abzielen:

#+ATTR_REVEAL: :frag (appear)
- Spionieren Tastatureingaben aus (Keylogger)
- Stehlen Zugangsdaten für Online-Dienste
- Sammeln Kreditkarteninformationen und andere persönliche Daten
- Suchen gezielt nach bestimmten Dateitypen (Dokumente, Bilder)
- Beispiele: Formjacking-Angriffe, Zeus, Emotet

** Ransomware
Ransomware verschlüsselt Dateien auf dem Opfersystem und fordert ein Lösegeld (meist in Kryptowährungen) für die Entschlüsselung:

#+ATTR_REVEAL: :frag (appear)
- Blockiert den Zugriff auf Daten oder das gesamte System
- Setzt Zahlungsfristen mit Drohungen der Datenlöschung
- Nutzt starke Verschlüsselungsalgorithmen
- Beispiele: CryptoLocker, Locky, Ryuk, NotPetya

** Weitere Malware-Typen
#+ATTR_REVEAL: :frag (appear)
- Spyware: Überwacht Benutzeraktivitäten ohne Wissen des Nutzers
- Adware: Zeigt unerwünschte Werbung an
- Rootkits: Verstecken sich tief im System und gewähren anhaltenden Zugriff
- Botnets: Netzwerke infizierter Computer, die ferngesteuert werden
- Fileless Malware: Operiert nur im Arbeitsspeicher ohne Dateien auf der Festplatte
- Cryptojacking: Missbraucht Rechenleistung des Opfers zum Schürfen von Kryptowährungen

* Tarnungsmethoden von Malware

** Obfuskierung
Obfuskierung bezeichnet Techniken, die den Code einer Malware so verändern, dass er schwieriger zu analysieren ist:
#+ATTR_REVEAL: :frag (appear)
- Umbenennung von Variablen und Funktionen
- Einfügen von nutzlosem Code
- Verschleierung der Programmlogik
- Verwendung ungewöhnlicher Programmierkonzepte

#+REVEAL: split
Hier ist ein kurzes Beispiel für Code-Obfuskierung in Python:

#+BEGIN_SRC python
# Ursprünglicher, lesbarer Code
def check_password(password):
    if password == "secret123":
        return True
    else:
        return False
#+END_SRC

Und hier ist eine obfuskierte Version:

#+BEGIN_SRC python
# Obfuskierte Version
import base64
____ = lambda _, __: base64.b64decode(_).decode() == __
_____ = lambda _: ''.join([chr(ord(c) ^ 42) for c in _])
__ = "K]GJ]LXWVc"
def ________(_______):
    return ____(_____("kc{i{pOqm{wmv"), _____(__)) if _ := _______ else not _
#+END_SRC

#+BEGIN_NOTES
Diese obfuskierte Version verwendet mehrere Techniken:

  -  Verwirrende Variablennamen (nur Unterstriche in unterschiedlicher Anzahl)
  -  Verschleierung der Passwort-Zeichenkette durch XOR-Verschlüsselung
  -  Base64-Dekodierung
  -  Unnötige Lambda-Funktionen
  -  Verwirrende Kontrollfluss-Logik mit einem Conditional Expression

Die obfuskierte Version macht genau dasselbe wie die ursprüngliche Funktion, ist aber viel schwieriger zu verstehen und zu analysieren. Dies ist ein einfaches Beispiel – in der Praxis können Obfuskierungstechniken noch viel komplexer sein und mehrere Schichten von Verschleierung umfassen.
#+END_NOTES


** Polymorphe Malware
Polymorphe Malware verändert bei jeder Infektion automatisch ihren Code, behält aber ihre Funktionalität:
#+ATTR_REVEAL: :frag (appear)
- Erzeugt bei jeder Verbreitung eine einzigartige Signatur
- Erschwert die Erkennung durch Signaturen
- Nutzt Verschlüsselungsroutinen mit wechselnden Schlüsseln
- Behält den gleichen Funktionskern

** Metamorphe Malware
Metamorphe Malware geht über polymorphe Techniken hinaus und verändert ihre gesamte Struktur:
#+ATTR_REVEAL: :frag (appear)
- Schreibt ihren eigenen Code vollständig um
- Verändert die Funktionsabfolge
- Nutzt alternative Methoden für die gleiche Funktionalität
- Äußerst schwer durch herkömmliche Antivirenprogramme zu erkennen

** Fileless Malware
Fileless Malware hinterlässt keine Dateien auf der Festplatte:
#+ATTR_REVEAL: :frag (appear)
- Läuft ausschließlich im Arbeitsspeicher
- Nutzt legitime Systemtools (Living-off-the-Land)
- Infiltriert die Registry oder andere persistente Bereiche
- Umgeht Datei-basierte Erkennungsmethoden

** Anti-Analyse-Techniken
Moderne Malware implementiert Methoden, um Analyse und Erkennung aktiv zu verhindern:
#+ATTR_REVEAL: :frag (appear)
- Erkennung von virtuellen Maschinen und Analyse-Umgebungen
- Verzögerte Ausführung des schädlichen Codes
- Erkennung von Debugging-Tools
- Abbruch der Ausführung bei Entdeckung von Analysetools
- Gezielte Ausführung nur in bestimmten Umgebungen oder Regionen

* Schutzmaßnahmen gegen Malware

** Präventive Maßnahmen
#+ATTR_REVEAL: :frag (appear)
- Regelmäßige Software-Updates und Patches
- Sorgfältiger Umgang mit E-Mail-Anhängen und Downloads
- Starke, einzigartige Passwörter
- Restriktive Benutzerrechte (Prinzip der geringsten Berechtigung)
- Sichere Konfiguration von Netzwerkgeräten
- Schulung und Sensibilisierung der Benutzer

** Technische Schutzmaßnahmen
#+ATTR_REVEAL: :frag (appear)
- Antivirensoftware mit aktuellem Signaturendatenbank
- Firewalls (Hardware und Software)
- Intrusion Detection/Prevention Systems (IDS/IPS)
- E-Mail- und Web-Filter
- Anwendungssteuerung (Application Whitelisting)
- Netzwerksegmentierung

** Backups und Wiederherstellung
#+ATTR_REVEAL: :frag (appear)
- Regelmäßige Datensicherungen
- Offline-Backups (nicht ständig mit dem System verbunden)
- Test der Wiederherstellungsprozesse
- Dokumentierte Notfallpläne

* Antivirensoftware und ihre Bewertungskriterien

** Signaturbasierte Erkennung (Primäre Erkennungsrate)
#+ATTR_REVEAL: :frag (appear)
- Vergleicht Dateien mit bekannten Malware-Signaturen
- Effektiv gegen bekannte Bedrohungen
- Benötigt regelmäßige Updates
- Unwirksam gegen neue, unbekannte Malware (Zero-Day-Exploits)

** Heuristische Erkennung (Sekundäre Erkennungsrate)
#+ATTR_REVEAL: :frag (appear)
- Analysiert Verhaltensweisen und Code-Strukturen
- Kann auch unbekannte Malware erkennen
- Basiert auf Regeln und Algorithmen
- Risiko von Fehlalarmen (False Positives)

** Verhaltensbasierte Erkennung
#+ATTR_REVEAL: :frag (appear)
- Überwacht das Laufzeitverhalten von Programmen
- Erkennt verdächtige Aktivitätsmuster
- Kann Zero-Day-Bedrohungen identifizieren
- Ressourcenintensiver als signaturbasierte Methoden

** Cloud-basierte Erkennung
#+ATTR_REVEAL: :frag (appear)
- Überprüft unbekannte Dateien gegen Online-Datenbanken
- Nutzt kollektive Intelligenz vieler Systeme
- Reduziert lokale Ressourcenbelastung
- Benötigt Internetverbindung

** Bewertungskriterien für Antivirenlösungen

*** Primäre Erkennungsrate (Virusdefinitionen)
Die Fähigkeit, bekannte Malware anhand von Signaturen zu identifizieren:
#+ATTR_REVEAL: :frag (appear)
- Umfang und Aktualität der Signaturdatenbank
- Geschwindigkeit der Integration neuer Signaturen
- Erkennungsrate bei standardisierten Tests (z.B. AV-TEST, AV-Comparatives)

*** Sekundäre Erkennungsrate (Heuristik)
Die Fähigkeit, unbekannte oder modifizierte Malware zu erkennen:
#+ATTR_REVEAL: :frag (appear)
- Effektivität der heuristischen Analyse
- Verhältnis zwischen Erkennungsrate und Fehlalarmen
- Anpassungsfähigkeit an neue Bedrohungstypen

*** Reparaturleistung
Die Fähigkeit, infizierte Systeme zu bereinigen:
#+ATTR_REVEAL: :frag (appear)
- Vollständige Entfernung von Malware (inkl. Registryeinträgen, versteckten Dateien)
- Wiederherstellung beschädigter Systemdateien
- Behandlung von Bootsektor-Infektionen
- Wiederherstellung verschlüsselter oder beschädigter Daten (wenn möglich)

*** Auswirkung auf die Systemleistung
Der Ressourcenverbrauch der Antivirensoftware:
#+ATTR_REVEAL: :frag (appear)
- CPU- und RAM-Nutzung im Ruhezustand
- Ressourcenverbrauch während Scans
- Einfluss auf Startzeit des Systems
- Verzögerungen bei alltäglichen Operationen

*** Schutzbereiche (Einfallstore)
Die abgedeckten Infektionswege und Angriffsvektoren:
#+ATTR_REVEAL: :frag (appear)
- E-Mail-Schutz
- Web-Schutz (HTTP/HTTPS-Filterung)
- Schutz vor Netzwerkangriffen
- USB-/Wechselmedien-Schutz
- Skript- und Makroschutz
- Schutz vor Social-Engineering-Angriffen

*** Funktionalität
Der Umfang der gebotenen Sicherheitsfunktionen:
#+ATTR_REVEAL: :frag (appear)
- Echtzeit-Schutz
- On-Demand-Scanning
- Automatische Updates
- Quarantäne-Management
- Ausnahmeregeln und Anpassungsmöglichkeiten
- Zusatzfunktionen (Firewall, Kindersicherung, VPN, etc.)

*** Bedienung
Die Benutzerfreundlichkeit der Software:
#+ATTR_REVEAL: :frag (appear)
- Intuitive Benutzeroberfläche
- Klare Darstellung von Bedrohungen und Maßnahmen
- Anpassbarkeit für verschiedene Nutzergruppen
- Hilfestellung und Dokumentation
- Benachrichtigungskonzept

*** Zentrale Administrierbarkeit
Die Verwaltungsmöglichkeiten in Unternehmensumgebungen:
#+ATTR_REVEAL: :frag (appear)
- Zentrales Management-Dashboard
- Gruppenrichtlinien und -konfigurationen
- Berichterstattung und Alarmierung
- Ferninstallation und -wartung
- Integration in bestehende IT-Management-Systeme

*** Selbstschutz der Antivirensoftware
Die Fähigkeit, sich gegen Angriffe auf die eigene Funktionalität zu schützen:
#+ATTR_REVEAL: :frag (appear)
- Schutz vor Deaktivierung durch Malware
- Manipulationssicherheit der eigenen Komponenten
- Schutz der Update-Mechanismen
- Widerstandsfähigkeit gegen DoS-Angriffe auf die Software

* Praxisaufgabe: Bewertung einer Antivirensoftware:

** Aufgabenstellung
Bewerten Sie eine Antivirensoftware nach folgenden Kriterien:
#+ATTR_REVEAL: :frag (appear)
  1) Primäre Erkennungsrate (Virusdefinitionen)
  2) Sekundäre Erkennungsrate (Heuristik)
  3) Reparaturleistung
  4) Ausbremsen der Systemleistung
  5) Schutzbereiche (Einfallstore)
  6) Funktionalität
  7) Bedienung
  8) Zentrale Administrierbarkeit
  9) Selbstschutz der Antivirensoftware

** Methodik zur Bewertung
1. *Auswahl der Software:* Wählen Sie eine aktuelle Antivirenlösung aus (kostenlos oder kommerziell).

2. *Informationssammlung:* 
#+ATTR_REVEAL: :frag (appear)
   - Hersteller-Dokumentation
   - Unabhängige Testberichte (AV-TEST, AV-Comparatives, etc.)
   - Nutzerbewertungen

3. *Bewertungsschema:* 
#+ATTR_REVEAL: :frag (appear)
   - Entwickeln Sie eine Skala (z.B. 1-5 Punkte pro Kriterium)
   - Definieren Sie klare Bewertungsmaßstäbe für jedes Kriterium
   - Gewichten Sie die Kriterien nach Relevanz für Ihren Einsatzbereich


4. *Auswertung:*
   - Erstellen Sie eine Gesamtbewertung
   - Heben Sie Stärken und Schwächen hervor
   - Formulieren Sie eine Empfehlung mit Begründung

** Beispiel für ein Bewertungsformular

| Kriterium                      | Bewertung (1-5) | Begründung                                      |
|--------------------------------+----------------+-------------------------------------------------|
| Primäre Erkennungsrate         |                | [Hier Ihre Beobachtungen eintragen]             |
| Sekundäre Erkennungsrate       |                | [Hier Ihre Beobachtungen eintragen]             |
| Reparaturleistung              |                | [Hier Ihre Beobachtungen eintragen]             |
| Systembelastung                |                | [Hier Ihre Beobachtungen eintragen]             |
| Schutzbereiche                 |                | [Hier Ihre Beobachtungen eintragen]             |
| Funktionalität                 |                | [Hier Ihre Beobachtungen eintragen]             |
| Bedienung                      |                | [Hier Ihre Beobachtungen eintragen]             |
| Zentrale Administrierbarkeit   |                | [Hier Ihre Beobachtungen eintragen]             |
| Selbstschutz                   |                | [Hier Ihre Beobachtungen eintragen]             |
|--------------------------------+----------------+-------------------------------------------------|
| Gesamtbewertung                |                | [Zusammenfassung und Empfehlung]                |

** Sicherheitshinweise zur Durchführung
- Führen Sie Tests mit potenziell gefährlicher Malware nur in isolierten Umgebungen durch
- Verwenden Sie Virtualisierung oder Sandbox-Lösungen
- Ziehen Sie unabhängige Testberichte heran, anstatt selbst mit aktiver Malware zu experimentieren
- Beachten Sie, dass einige Tests in produktiven Umgebungen Risiken bergen können
