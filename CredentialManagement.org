:LaTeX_PROPERTIES:
#+LANGUAGE: de
#+OPTIONS: d:nil todo:nil pri:nil tags:nil
#+OPTIONS: H:4
#+LaTeX_CLASS: orgstandard
#+LaTeX_CMD: xelatex
#+LATEX_HEADER: \usepackage{listings}
:END:



#+TITLE: Credential-Management Lab mit MySQL und HashiCorp Vault
#+AUTHOR: ITT-Net-IS
#+DATE: 2025-05-01

* Einführung in das Credential-Management

Anwendungen benötigen häufig Zugriff auf Datenbanken und andere sensible Systeme. Dafür werden Zugangsdaten (Credentials) benötigt, die oft unsicher verwaltet werden:

- Hartcodierte Credentials im Quellcode
- Unverschlüsselte Config-Dateien
- Umgebungsvariablen ohne ausreichenden Schutz
- Unsichere Weitergabe von Zugangsdaten im Team

Diese Praktiken führen zu erheblichen Sicherheitsrisiken:
- Versehentliche Veröffentlichung sensibler Daten in Code-Repositories
- Unbefugter Zugriff auf Produktionssysteme
- Fehlende Möglichkeit zur Nachverfolgung von Credential-Nutzung
- Schwierigkeiten beim Rotieren von Zugangsdaten

** Lernziele dieses Labs
- Verständnis für die Probleme unsicherer Credential-Verwaltung entwickeln
- Sichere Alternativen mit HashiCorp Vault kennenlernen
- Praktische Erfahrung mit einer Vault-Integration in Python-Anwendungen sammeln
- Best Practices für Credential-Management in der Entwicklung anwenden

* Vorbereitung der Laborumgebung

** Voraussetzungen
- Windows-Betriebssystem
- VSCode installiert
- Docker Desktop installiert und konfiguriert
- Grundlegende Python-Kenntnisse
- Grundlegende SQL-Kenntnisse
  
** Installation der benötigten Tools
1. VSCode-Erweiterungen:
   - Python Extension (ms-python.python)
   - Docker Extension (ms-azuretools.vscode-docker)
   - Remote Development Extension Pack (empfohlen)

2. Benötigte Dateien herunterladen:
   - Die Lab-Dateien können aus [[file:Beispiele/CredentialManagement/][./Beispiele/CredentialManagement]] heruntergeladen werden.
   - Alternativ: Die einzelnen Dateien aus diesem Dokument kopieren.

** Projektstruktur

#+BEGIN_EXAMPLE
credential-management-lab/
├── docker-compose.yml
├── app/
│   ├── __init__.py
│   ├── main.py
│   ├── config.py
│   ├── database.py
│   └── requirements.txt
├── mysql/
│   └── init.sql
├── vault/
│   └── config.hcl
└── README.md
#+END_EXAMPLE


* Teil 1: Problematischer Ansatz - Hartcodierte Credentials

** Schritt 1: Aufsetzen der MySQL-Datenbank mit Docker

Erstellen Sie eine `docker-compose.yml` Datei:

#+BEGIN_SRC yaml :tangle Beispiele/CredentialManagement/docker-compose.yml
version: '3'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: inventory
      MYSQL_USER: app_user
      MYSQL_PASSWORD: app_password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
#+END_SRC

Erstellen Sie die `mysql/init.sql` Datei:

#+BEGIN_SRC sql :tangle Beispiele/CredentialManagement/mysql/init.sql
USE inventory;

CREATE TABLE products (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    price DECIMAL(10, 2) NOT NULL,
    quantity INT NOT NULL
);

INSERT INTO products (name, price, quantity) VALUES
    ('Laptop', 999.99, 10),
    ('Smartphone', 499.99, 20),
    ('Headphones', 99.99, 50),
    ('Tablet', 299.99, 15);

CREATE USER 'readonly_user'@'%' IDENTIFIED BY 'readonly_password';
GRANT SELECT ON inventory.products TO 'readonly_user'@'%';

CREATE USER 'admin_user'@'%' IDENTIFIED BY 'admin_password';
GRANT ALL PRIVILEGES ON inventory.* TO 'admin_user'@'%';
#+END_SRC

** Schritt 2: Erstellen einer einfachen Python-Anwendung mit hartcodierten Credentials

Erstellen Sie die Datei `app/database.py`:

#+BEGIN_SRC python :tangle Beispiele/CredentialManagement/app/database.py
import mysql.connector

def connect_to_database():
    # PROBLEM: Hartcodierte Credentials im Code
    connection = mysql.connector.connect(
        host="mysql",
        database="inventory",
        user="admin_user",
        password="admin_password"  # Sensible Information im Klartext!
    )
    return connection

def get_all_products():
    connection = connect_to_database()
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    cursor.close()
    connection.close()
    return products
#+END_SRC

Erstellen Sie die Datei `app/main.py`:

#+BEGIN_SRC python :tangle Beispiele/CredentialManagement/app/main.py
from database import get_all_products

def show_all_products():
    try:
        products = get_all_products()
        print("\n=== Produkte im Inventar ===")
        for product in products:
            print(f"ID: {product['id']}, Name: {product['name']}, "
                  f"Preis: €{product['price']}, Menge: {product['quantity']}")
    except Exception as e:
        print(f"Fehler beim Abrufen der Produkte: {e}")

if __name__ == "__main__":
    show_all_products()
#+END_SRC

Erstellen Sie die Datei `app/requirements.txt`:

#+BEGIN_SRC plaintext :tangle Beispiele/CredentialManagement/app/requirements.txt
mysql-connector-python==8.0.32
#+END_SRC


** Schritt 3: Die problematische Anwendung ausführen

1. Starten Sie die Docker-Container:

#+BEGIN_SRC bash
   docker-compose up -d
#+END_SRC

2. Bauen Sie ein Docker-Image für die Anwendung:

Dafür brauchen Sie ein Dockerfile:

#+BEGIN_SRC Dockerfile :tangle Beispiele/CredentialManagement/Dockerfile
   FROM python:3.9-slim
   
   WORKDIR /app
   
   COPY app/requirements.txt .
   RUN pip install -r requirements.txt
   
   COPY app/ .
   
   CMD ["python", "main.py"]
#+END_SRC

Dann können Sie die App wie folgt starten:

#+BEGIN_SRC bash
   docker build -t credential-app -f Dockerfile.app .
#+END_SRC

3. Führen Sie die Anwendung aus:

#+BEGIN_SRC bash
   docker run --rm -it credential-app
#+END_SRC

** Schritt 4: Die Probleme diskutieren

Identifizieren Sie die folgenden Probleme:
- Die Zugangsdaten sind im Quellcode sichtbar
- Bei Versionskontrolle werden die Credentials mit eingecheckt
- Bei einer Änderung der Zugangsdaten muss der Code angepasst werden
- Keine Trennung zwischen Entwicklungs-, Test- und Produktionsumgebung
- Keine Möglichkeit, die Nutzung der Credentials zu protokollieren

* Teil 2: Verbesserter Ansatz - Verwendung von Umgebungsvariablen

** Schritt 1: Refaktorisieren der Anwendung zur Verwendung von Umgebungsvariablen

Erstellen Sie die Datei `app/config.py`:

#+BEGIN_SRC python
import os

# Konfiguration über Umgebungsvariablen
DB_HOST = os.environ.get('DB_HOST', 'mysql')
DB_NAME = os.environ.get('DB_NAME', 'inventory')
DB_USER = os.environ.get('DB_USER', 'admin_user')
DB_PASSWORD = os.environ.get('DB_PASSWORD')  # Kein Default-Wert für Passwörter!

def validate_config():
    if not DB_PASSWORD:
        raise ValueError("Die Umgebungsvariable DB_PASSWORD muss gesetzt sein!")
#+END_SRC

Aktualisieren Sie die Datei `app/database.py`:

#+BEGIN_SRC python
import mysql.connector
from config import DB_HOST, DB_NAME, DB_USER, DB_PASSWORD, validate_config

def connect_to_database():
    # Überprüfen Sie, ob alle erforderlichen Konfigurationsparameter vorhanden sind
    validate_config()
    
    # Verwenden Sie Umgebungsvariablen statt hartcodierter Werte
    connection = mysql.connector.connect(
        host=DB_HOST,
        database=DB_NAME,
        user=DB_USER,
        password=DB_PASSWORD
    )
    return connection

def get_all_products():
    connection = connect_to_database()
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    cursor.close()
    connection.close()
    return products
#+END_SRC

** Schritt 2: Die verbesserte Anwendung ausführen

1. Überarbeiten Sie das Dockerfile:

#+BEGIN_SRC Dockerfile :tangle Beispiele/CredentialManagement/Dockerfile
   FROM python:3.9-slim
   
   WORKDIR /app
   
   COPY app/requirements.txt .
   RUN pip install -r requirements.txt
   
   COPY app/ .
   
   CMD ["python", "main.py"]
#+END_SRC


2. Bauen Sie das Docker-Image:
#+BEGIN_SRC bash
   docker build -t credential-app-env .
#+END_SRC


3. Führen Sie die Anwendung (interaktiv) aus:
#+BEGIN_SRC bash
   docker run --rm --network credential-management-lab_app-network -it credential-app-env
#+END_SRC


** Schritt 3: Die verbleibenden Probleme diskutieren

Obwohl dieser Ansatz besser ist als hartcodierte Credentials, bleiben Probleme:
- Umgebungsvariablen sind für alle Prozesse auf dem System sichtbar
- Passwörter können in Shell-Historien landen
- Keine automatische Rotation von Credentials
- Keine Protokollierung der Credential-Nutzung
- Docker-Images können Umgebungsvariablen in ihren Metadaten speichern

* Teil 3: Sicherer Ansatz - HashiCorp Vault

** Schritt 1: Aufsetzen von HashiCorp Vault mit Docker

Erweitern Sie Ihre `docker-compose.yml` Datei:

#+BEGIN_SRC yaml :tangle Beispiele/CredentialManagement/docker-compose.yml 
version: '3'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: inventory
      MYSQL_USER: admin_user
      MYSQL_PASSWORD: admin_password
    ports:
      - "3306:3306"
    volumes:
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  vault:
    image: hashicorp/vault:1.13
    container_name: vault
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: myroot
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
#+END_SRC

** Schritt 2: Konfigurieren von Vault

Erstellen Sie ein Setup-Skript `setup_vault.sh`:

#+BEGIN_SRC bash :tangle Beispiele/CredentialManagement/setup_vault.sh_
#!/bin/bash

# Warten, bis Vault gestartet ist
sleep 5

# Vault-Adresse und Token setzen
export VAULT_ADDR=http://vault:8200
export VAULT_TOKEN=myroot

# KV Secrets Engine aktivieren
vault secrets enable -path=secret kv-v2

# MySQL Secrets in Vault speichern
vault kv put secret/mysql/admin \
    user=admin_user \
    password=admin_password

vault kv put secret/mysql/readonly \
    user=readonly_user \
    password=readonly_password

# Database Secrets Engine aktivieren
vault secrets enable database

# MySQL-Verbindung konfigurieren
vault write database/config/mysql \
    plugin_name=mysql-database-plugin \
    connection_url="{{username}}:{{password}}@tcp(mysql:3306)/" \
    allowed_roles="readonly,admin" \
    username="root" \
    password="rootpassword"

# Readonly-Rolle erstellen
vault write database/roles/readonly \
    db_name=mysql \
    creation_statements="CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT ON inventory.* TO '{{name}}'@'%';" \
    default_ttl="1h" \
    max_ttl="24h"

# Admin-Rolle erstellen
vault write database/roles/admin \
    db_name=mysql \
    creation_statements="CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT ALL PRIVILEGES ON inventory.* TO '{{name}}'@'%';" \
    default_ttl="1h" \
    max_ttl="24h"

# AppRole Auth Method aktivieren
vault auth enable approle

# Policies erstellen
vault policy write readonly-policy -<<EOF
path "secret/data/mysql/readonly" {
  capabilities = ["read"]
}

path "database/creds/readonly" {
  capabilities = ["read"]
}
EOF

vault policy write admin-policy -<<EOF
path "secret/data/mysql/admin" {
  capabilities = ["read"]
}

path "database/creds/admin" {
  capabilities = ["read"]
}
EOF

# AppRoles erstellen
vault write auth/approle/role/readonly \
    token_policies=readonly-policy \
    token_ttl=1h \
    token_max_ttl=4h

vault write auth/approle/role/admin \
    token_policies=admin-policy \
    token_ttl=1h \
    token_max_ttl=4h

# AppRole IDs und Secrets abrufen und anzeigen
READONLY_ROLE_ID=$(vault read -format=json auth/approle/role/readonly/role-id | jq -r '.data.role_id')
READONLY_SECRET_ID=$(vault write -format=json -f auth/approle/role/readonly/secret-id | jq -r '.data.secret_id')

ADMIN_ROLE_ID=$(vault read -format=json auth/approle/role/admin/role-id | jq -r '.data.role_id')
ADMIN_SECRET_ID=$(vault write -format=json -f auth/approle/role/admin/secret-id | jq -r '.data.secret_id')

echo "Readonly Role ID: $READONLY_ROLE_ID"
echo "Readonly Secret ID: $READONLY_SECRET_ID"
echo "Admin Role ID: $ADMIN_ROLE_ID"
echo "Admin Secret ID: $ADMIN_SECRET_ID"
#+END_SRC

** Schritt 3: Aktualisieren der Anwendung für die Verwendung von Vault

Aktualisieren Sie `app/requirements.txt`:

#+BEGIN_SRC plaintext :tangle Beispiele/CredentialManagement/app/requirements.txt
mysql-connector-python==8.0.32
hvac==1.1.0
python-dotenv==1.0.0
#+END_SRC

Erstellen Sie eine neue Datei `app/.env`:

#+BEGIN_SRC plaintext :tangle Beispiele/CredentialManagement/app/.env
VAULT_ADDR=http://vault:8200
VAULT_ROLE_ID=<admin_role_id>
VAULT_SECRET_ID=<admin_secret_id>
#+END_SRC

Erstellen Sie eine neue Datei `app/vault_client.py`:

#+BEGIN_SRC python :tangle Beispiele/CredentialManagement/app/vault_client.py
import os
import hvac
from dotenv import load_dotenv

load_dotenv()

def get_vault_client():
    """Verbindung zum Vault-Server herstellen und authentifizieren"""
    client = hvac.Client(url=os.environ.get('VAULT_ADDR', 'http://vault:8200'))
    
    # Mit AppRole authentifizieren
    role_id = os.environ.get('VAULT_ROLE_ID')
    secret_id = os.environ.get('VAULT_SECRET_ID')
    
    if not role_id or not secret_id:
        raise ValueError("VAULT_ROLE_ID und VAULT_SECRET_ID müssen gesetzt sein")
    
    # AppRole-Authentifizierung durchführen
    client.auth.approle.login(
        role_id=role_id,
        secret_id=secret_id
    )
    
    return client

def get_static_credentials(path):
    """Statische Credentials von Vault abrufen"""
    client = get_vault_client()
    response = client.secrets.kv.v2.read_secret_version(path=path)
    return response['data']['data']

def get_dynamic_credentials(path):
    """Dynamische Credentials von Vault abrufen"""
    client = get_vault_client()
    response = client.read(path)
    return response['data']
#+END_SRC

Aktualisieren Sie `app/database.py`:

#+BEGIN_SRC python :tangle Beispiele/CredentialManagement/app/database.py
import mysql.connector
from vault_client import get_static_credentials, get_dynamic_credentials

def connect_with_static_credentials():
    """Verbindung mit statischen Credentials herstellen"""
    # Credentials aus Vault abrufen
    creds = get_static_credentials('mysql/admin')
    
    # Mit den abgerufenen Credentials verbinden
    connection = mysql.connector.connect(
        host="mysql",
        database="inventory",
        user=creds['user'],
        password=creds['password']
    )
    return connection

def connect_with_dynamic_credentials():
    """Verbindung mit dynamischen Credentials herstellen"""
    # Dynamische Credentials für die Admin-Rolle erstellen
    creds = get_dynamic_credentials('database/creds/admin')
    
    # Mit den dynamisch erstellten Credentials verbinden
    connection = mysql.connector.connect(
        host="mysql",
        database="inventory",
        user=creds['username'],
        password=creds['password']
    )
    return connection

def get_all_products(use_dynamic=True):
    """Alle Produkte aus der Datenbank abrufen"""
    if use_dynamic:
        connection = connect_with_dynamic_credentials()
    else:
        connection = connect_with_static_credentials()
        
    cursor = connection.cursor(dictionary=True)
    cursor.execute("SELECT * FROM products")
    products = cursor.fetchall()
    cursor.close()
    connection.close()
    return products
#+END_SRC

Aktualisieren Sie `app/main.py`:

#+BEGIN_SRC python :tangle Beispiele/CredentialManagement/app/main.py
from database import get_all_products
import argparse

def show_all_products(use_dynamic):
    try:
        products = get_all_products(use_dynamic=use_dynamic)
        print("\n=== Produkte im Inventar ===")
        for product in products:
            print(f"ID: {product['id']}, Name: {product['name']}, "
                  f"Preis: €{product['price']}, Menge: {product['quantity']}")
        
        credential_type = "dynamischen" if use_dynamic else "statischen"
        print(f"\nErfolgreich mit {credential_type} Credentials verbunden!")
    except Exception as e:
        print(f"Fehler beim Abrufen der Produkte: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Credential Demo mit HashiCorp Vault')
    parser.add_argument('--static', action='store_true', help='Statische Credentials verwenden')
    args = parser.parse_args()
    
    show_all_products(not args.static)
#+END_SRC

** Schritt 4: Vault initialisieren und die verbesserte Anwendung ausführen

1. Starten Sie die Docker-Container:

#+BEGIN_SRC bash
   docker-compose up -d
#+END_SRC



2. Führen Sie das Vault-Setup aus:

#+BEGIN_SRC bash
   docker cp setup_vault.sh vault:/tmp/
   docker exec vault sh -c "chmod +x /tmp/setup_vault.sh && /tmp/setup_vault.sh"
#+END_SRC


3. Notieren Sie die ausgegebenen Role IDs und Secret IDs und aktualisieren Sie die `.env`-Datei.

4. Bauen Sie ein Docker-Image für die Vault-Anwendung:

#+BEGIN_SRC Dockerfile :tangle Beispiele/CredentialManagement/Dockerfile
   FROM python:3.9-slim
   
   WORKDIR /app
   
   COPY app/requirements.txt .
   RUN pip install -r requirements.txt
   
   COPY app/ .
   
   CMD ["python", "main.py"]
#+END_SRC


5. Bauen Sie das Docker-Image:

#+BEGIN_SRC bash
   docker build -t credential-app-vault .
#+END_SRC

6. Führen Sie die Anwendung mit dynamischen Credentials aus:

#+BEGIN_SRC bash
   docker run --network credential-management-lab_app-network credential-app-vault
#+END_SRC

7. Führen Sie die Anwendung mit statischen Credentials aus:

#+BEGIN_SRC bash
   docker run --network credential-management-lab_app-network credential-app-vault --static
#+END_SRC

** Schritt 5: Die Vorteile von HashiCorp Vault diskutieren

- Keine Passwörter im Code oder in Umgebungsvariablen
- Temporäre, dynamisch generierte Credentials mit begrenzter Lebensdauer
- Automatische Rotation von Credentials
- Detaillierte Zugriffskontrolle über Policies
- Protokollierung aller Credential-Zugriffe
- Zentrale Verwaltung von Secrets für verschiedene Systeme
- Unterstützung für verschiedene Authentifizierungsmethoden

* Teil 4: Best Practices für Credential-Management

** 1. Niemals Credentials im Quellcode speichern
- Trennung von Code und Konfiguration
- Verwendung von Secret-Management-Lösungen wie HashiCorp Vault
  
** 2. Das Prinzip der geringsten Privilegien anwenden
- Nur die minimal notwendigen Berechtigungen vergeben
- Verschiedene Benutzer für verschiedene Zugriffsstufen

** 3. Regelmäßige Rotation von Credentials
- Automatisierte Rotation mit Tools wie HashiCorp Vault
- Kurzlebige, dynamisch generierte Credentials verwenden

** 4. Sichere Übertragung von Credentials
- Immer verschlüsselte Verbindungen verwenden (TLS/SSL)
- Vermeidung von unverschlüsselten E-Mails oder Messaging-Diensten

** 5. Überwachung und Protokollierung
- Alle Zugriffe auf Credentials protokollieren
- Ungewöhnliche Zugriffsversuche überwachen

* Teil 5: Übungen für die Lernenden

** Übung 1: Implementierung eines Read-Only-Zugriffs
Modifizieren Sie die Anwendung, um mit einem Read-Only-Benutzer zu arbeiten.

** Übung 2: Credential-Leakage simulieren
Simulieren Sie ein versehentliches Commit von Credentials und diskutieren Sie die Konsequenzen.

** Übung 3: Implementierung von automatischer Credential-Rotation
Erweitern Sie die Anwendung, um mit abgelaufenen Credentials umzugehen und neue anzufordern.

** Übung 4: Integration mit einer CI/CD-Pipeline
Diskutieren Sie, wie Vault in einer CI/CD-Pipeline verwendet werden kann, ohne Credentials preiszugeben.

* Fazit

** Zusammenfassung
- Unsichere Credential-Management-Praktiken stellen ein erhebliches Sicherheitsrisiko dar
- HashiCorp Vault bietet eine sichere und flexible Lösung für das Credential-Management
- Best Practices wie das Prinzip der geringsten Privilegien und regelmäßige Credential-Rotation sind entscheidend

** Weiterführende Ressourcen
- [[https://www.vaultproject.io/docs][HashiCorp Vault Dokumentation]]
- [[https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html][OWASP Cheat Sheet zu Secret Management]]
- [[https://12factor.net/config][Twelve-Factor App - Coqnfig]]
- [[https://hvac.readthedocs.io/][Python hvac Bibliothek]]

* Anhang: Erweiterungsmöglichkeiten

** Verwendung von Azure Key Vault oder AWS Secrets Manager
Alternative Cloud-basierte Secret-Management-Lösungen

** Integration mit Kubernetes
Verwendung von Vault mit Kubernetes über den Vault Injector

** Multi-Environment-Setup
Verschiedene Konfigurationen für Entwicklung, Test und Produktion

** Erweiterte Authentifizierungsmethoden
Implementierung von TLS- oder JWT-basierter Authentifizierung
